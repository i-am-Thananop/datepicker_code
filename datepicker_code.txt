window.formatDateToBE = function(date) {
    if (!date) return '';
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear() + 543;
    return `${day}/${month}/${year}`;
};

window.parseDateInput = function(dateString) {
    if (!dateString) return null;
    const parts = dateString.split('/');
    if (parts.length !== 3) return null;
    const day = parseInt(parts[0], 10);
    const month = parseInt(parts[1], 10) - 1;
    let year = parseInt(parts[2], 10);
    if (year >= 2500) {
        year -= 543;
    }
    return new Date(year, month, day);
};

window.calculateAgeFromDateStr = function(dateStr) {
    if (!dateStr) return;
    const parts = dateStr.split('/');
    if (parts.length !== 3) return null;

    const day = parseInt(parts[0], 10);
    const month = parseInt(parts[1], 10) - 1;
    let year = parseInt(parts[2], 10);
    if (year >= 2500) {
        year -= 543;
    }

    const birthDate = new Date(year, month, day);
    const today = new Date();
    let age = today.getFullYear() - birthDate.getFullYear();

    const m = today.getMonth() - birthDate.getMonth();
    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
        age--;
    }

    $('#age').val(age);
    updateAgeUnit();
};

$(document).ready(function() {
    $.datepicker.regional['th'] = {
        closeText: 'ปิด',
        prevText: 'ย้อน',
        nextText: 'ถัดไป',
        currentText: 'วันนี้',
        monthNames: ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน',
                     'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'],
        monthNamesShort: ['ม.ค.', 'ก.พ.', 'มี.ค.', 'เม.ย.', 'พ.ค.', 'มิ.ย.',
                          'ก.ค.', 'ส.ค.', 'ก.ย.', 'ต.ค.', 'พ.ย.', 'ธ.ค.'],
        dayNames: ['อาทิตย์', 'จันทร์', 'อังคาร', 'พุธ', 'พฤหัส', 'ศุกร์', 'เสาร์'],
        dayNamesShort: ['อา.', 'จ.', 'อ.', 'พ.', 'พฤ.', 'ศ.', 'ส.'],
        dayNamesMin: ['อา.', 'จ.', 'อ.', 'พ.', 'พฤ.', 'ศ.', 'ส.'],
        dateFormat: 'dd/mm/yy',
        firstDay: 0,
        isRTL: false,
        yearSuffix: ''
    };
    $.datepicker.setDefaults($.datepicker.regional['th']);

    initDatepickerModal2();
});

window.initDatepickerModal2 = function(context = $(document)) {
    console.log("initDatepickerModal2 called", context);

    context.find(".datepickerModal2").each(function() {
        $(this).datepicker("destroy");
        const existingVal = $(this).val();
        let initialDate = null;

        const defaultDateFields = ['receipt_date', 'date_report'];
        const currentId = $(this).attr('id');

        if (defaultDateFields.includes(currentId)) {
            initialDate = new Date();
        }

        if (existingVal) {
            const date = parseDateInput(existingVal);
            if (date) {
                initialDate = date;
            }
        }

        $(this).datepicker({
            changeMonth: true,
            changeYear: true,
            yearRange: (new Date().getFullYear() - 100) + ':' + (new Date().getFullYear()),
            defaultDate: initialDate,
            beforeShow: function(input, inst) {
                const currentValue = $(this).val();
                if (currentValue) {
                    const date = parseDateInput(currentValue);
                    if (date) {
                        $(this).val(formatDateToBE(date));
                    }
                } else if (defaultDateFields.includes(currentId)) {
                    $(this).val(formatDateToBE(new Date()));
                }

                setTimeout(function() {
                    $(".ui-datepicker-year").html(
                        $(".ui-datepicker-year option").map(function() {
                            const gregorianYear = $(this).val();
                            return `<option value="${gregorianYear}">${parseInt(gregorianYear) + 543}</option>`;
                        }).get().join('')
                    );

                    const currentDate = $(input).datepicker('getDate') || new Date();
                    $(".ui-datepicker-year").val(currentDate.getFullYear());
                    $(".ui-datepicker-month").val(currentDate.getMonth());
                }, 10);
            },
            onSelect: function(dateText, inst) {
                const date = $(this).datepicker('getDate');
                $(this).val(formatDateToBE(date));

                if ($(this).attr('id') === 'date_birth') {
                    calculateAgeFromDateStr(dateText);
                }
            },
            onChangeMonthYear: function(year, month, inst) {
                setTimeout(function() {
                    $(".ui-datepicker-year").html(
                        $(".ui-datepicker-year option").map(function() {
                            const gregorianYear = $(this).val();
                            return `<option value="${gregorianYear}">${parseInt(gregorianYear) + 543}</option>`;
                        }).get().join('')
                    );
                    $(".ui-datepicker-year").val(year);
                    $(".ui-datepicker-month").val(month - 1);
                }, 10);
            }
        });

        if (existingVal) {
            const date = parseDateInput(existingVal);
            if (date) {
                $(this).datepicker('setDate', date);
                $(this).val(formatDateToBE(date));
            }
        } else if (defaultDateFields.includes(currentId)) {
            $(this).val(formatDateToBE(new Date()));
        }

        if (!existingVal && !defaultDateFields.includes(currentId)) {
            $(this).val('');
        }
    });
};

$(document).on('focus', '.datepickerModal2', function() {
    $(this).datepicker('show');
});
